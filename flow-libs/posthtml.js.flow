// @flow

// Derived from the PostHTML sources available at
// https://github.com/posthtml/posthtml-parser/blob/41df54c0ae3061cc6f417826676fda5a3d4806c0/index.js
// https://github.com/posthtml/posthtml/blob/881d4a5b170109789a5245a379229afb4793e21a/lib/index.js
// https://github.com/posthtml/posthtml/blob/881d4a5b170109789a5245a379229afb4793e21a/lib/api.js
// which is licensed MIT.

declare module 'posthtml' {
  declare type PostHTMLNode = {
    tag: string,
    attrs?: {[string]: string, ...},
    content?: Array<string | PostHTMLNode>,
    location?: {
       start: {|line: number, column: number|},
       end: {|line: number, column: number|},
       ...
     },
    ...
  };

  declare type PostHTMLTree = Array<PostHTMLNode>;
  declare type PostHTMLOptions = {
    sync?: Boolean,
    skipParse?: Boolean,
    ...
  };
  declare type PostHTMLMessage = {
    type: 'dependency',
    file: string,
    ...
  };

  declare type PostHTMLExpression = $Shape<PostHTMLNode> | $Shape<PostHTMLNode>[]

  declare var walk: (fn: (node: PostHTMLNode) => PostHTMLNode | PostHTMLNode[]) => void;
  declare var process: (
    tree: PostHTMLTree | string,
    options: ?PostHTMLOptions,
  ) => Promise<{
    html: string,
    tree: PostHTMLTree,
    messages: Array<PostHTMLMessage>,
    ...
  }>;
  declare var match: (expression: PostHTMLExpression, fn: (node: PostHTMLNode) => PostHTMLNode) => void;

  declare class Api {
    static walk: typeof walk;
    walk: typeof walk;
    process: typeof process;
    match: typeof match;
  }

  declare class PostHTML extends Api {
    name: string;
    version: number;
  }

  declare module.exports: (plugins: ?Array<Function>) => PostHTML;
}
